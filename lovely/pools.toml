[manifest]
version = "1.0.0"
dump_lua = true
priority = 1

# Prevent boss blinds from disabled mods from spawning (Doesn't use get_current_pool hook)
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''
for k, v in pairs(G.GAME.banned_keys) do
    if eligible_bosses[k] then eligible_bosses[k] = nil end
end
'''
position = 'after'
payload = '''
local original_pool = eligible_bosses
local added_via_check = false
for k, v in pairs(eligible_bosses) do
    if G.P_BLINDS[k] then
        if not SuperRogue.is_object_mod_active(G.P_BLINDS[k], {type = 'Boss'}) then 
            eligible_bosses[k] = nil
        else
            added_via_check = true
        end
    end
end
if not added_via_check then
    eligible_bosses = original_pool
end
'''
match_indent = true
times = 1

# Prevent boosters from disabled mods from spawning (Doesn't use get_current_pool hook)
[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/overrides.lua"]'''
pattern = '''
if add and not G.GAME.banned_keys[v.key] then cume = cume + (v.current_weight or 1); temp_in_pool[v.key] = true end
'''
position = 'before'
payload = '''
if add then
    add = SuperRogue.is_object_mod_active(v, {type = 'Booster'})
end
'''
match_indent = true
times = 1

# Prevent shop from attempting to generate cards from unavailable pools
[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''
total_rate = total_rate + G.GAME[v:lower()..'_rate']
'''
position = 'at'
payload = '''
if SuperRogue.is_pool_available(v) then
    total_rate = total_rate + G.GAME[v:lower()..'_rate']
end
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''
table.insert(rates, { type = v, val = G.GAME[v:lower()..'_rate'] })
'''
position = 'at'
payload = '''
if SuperRogue.is_pool_available(v) then
    table.insert(rates, { type = v, val = G.GAME[v:lower()..'_rate'] })
end
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''
_pool[#_pool+1] = SMODS.ObjectTypes[_type].default
'''
position = 'at'
payload = '''
if SuperRogue.is_object_mod_active(SMODS.ObjectTypes[_type]) then
    _pool[#_pool+1] = SMODS.ObjectTypes[_type].default
end
'''
match_indent = true
times = 1